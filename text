this is my current structure help me fit the code in .    app   components hooks(useAuth.js containing import { useMutation, useQueryClient } from "@tanstack/react-query"; import {   registerUser,   loginUser /*logoutUser ,*/,   getPasswordResetLink,   validateEmail,   resendEmailValCode, } from "@/services/authService";  export const useRegister = () => {   const queryClient = useQueryClient();    return useMutation({     mutationFn: registerUser,     onSuccess: () => {       queryClient.invalidateQueries({ queryKey: ["users"] });     },     onError: (error) => {       // Handle error     },   }); };  export const useLogin = () => {   const queryClient = useQueryClient();    return useMutation({     mutationFn: loginUser,     onSuccess: (data) => {       console.log(data);       // Refetch user data after login       queryClient.invalidateQueries({ queryKey: ["users"] });     },     onError: (error) => {       console.log(error);       // Handle error     },   }); };  export const useGetPasswordResetLink = () => {   const queryClient = useQueryClient();    return useMutation({     mutationFn: getPasswordResetLink,     onSuccess: (data) => {       console.log(data);       // Refetch user data after login       //queryClient.invalidateQueries({ queryKey: ["users"] });     },     onError: (error) => {       console.log(error);       // Handle error     },   }); };  export const useValidateEmail = () => {   const queryClient = useQueryClient();    return useMutation({     mutationFn: validateEmail,     onSuccess: (data) => {       console.log(data);       // Refetch user data after login       //queryClient.invalidateQueries({ queryKey: ["users"] });     },     onError: (error) => {       console.log(error);       // Handle error     },   }); }; export const useResendEmailValCode = () => {   const queryClient = useQueryClient();    return useMutation({     mutationFn: resendEmailValCode,     onSuccess: (data) => {       console.log(data);       // Refetch user data after login       //queryClient.invalidateQueries({ queryKey: ["users"] });     },     onError: (error) => {       console.log(error);       // Handle error     },   }); }; /* export const useLogout = () => {   const queryClient = useQueryClient();    return useMutation(logoutUser, {     onSuccess: () => {       // Remove cached user data on logout       queryClient.removeQueries({ queryKey: ["users"] });     },   }); }; */ )  service (authservice.js contains import axiosInstance from "@/utils/axiosInstance";  export const registerUser = async (user) => {   return await axiosInstance.post("/auth/registerUser", user); };  export const loginUser = async (user) => {   return await axiosInstance.post("/auth/loginUser", user); };  export const getPasswordResetLink = async (user) => {   return await axiosInstance.post("/auth/sendPasswordResetLink", user); };  export const validateEmail = async (user) => {   return await axiosInstance.post("/auth/verifyEmailorTel", user); };  export const resendEmailValCode = async (user) => {   return await axiosInstance.post("/auth/sendVerificationCodeEmailOrTel", user); };  export const logoutUser = async () => {   return await axiosInstance.post("/auth"); }; )   store(index.js  contains // store/index.js import { configureStore } from "@reduxjs/toolkit"; import userReducer from "./slice";  const store = configureStore({   reducer: {     user: userReducer,   }, });  export default store;    slice.js // store/slice.js import { createSlice } from "@reduxjs/toolkit";  // Initial state const initialState = {   user: null,   isAuthenticated: false,   accessToken: null, };  // Create the slice const userSlice = createSlice({   name: "user",   initialState,   reducers: {     setUser: (state, action) => {       state.user = action.payload;       state.isAuthenticated = true;       state.accessToken = action.payload.accessToken;     },     logout: (state) => {       state.user = null;       state.isAuthenticated = false;       state.accessToken = null;     },   }, });  // Export actions for use in components export const { setUser, logout } = userSlice.actions;  // Export the reducer to be used in the store export default userSlice.reducer;     ) utils (axiosInstance.js)